#!/bin/bash
#
# Copyright 2012 -- Andrew Davies <a.w.davies.vio@gmail.com>
#
# This script allows the user to setup python in a virtual
# environment so that pip (a python package installer) can install
# the latest git version of django on the computer without need for
# root permissions.
#
# This file depends on the vars folder "vpython-vars" by the way,
# so run this file in the same folder as said vpython-vars file.
#
# Now, go read the poorly-written readme.
len=`expr length $(basename $0)` 
sauce_dir=${0:0:-$len}

VAR_FILE="$sauce_dir/.vpython-vars";
GLOB_FILE="$sauce_dir/.vpython-globals"
TRUNK_FILE="`eval echo ~`/.django_trunk"

# Does the var file exist?
if [ -e "$VAR_FILE" ]; then
  . $VAR_FILE
else
  echo "ERROR: $VAR_FILE not found."
  exit 1
fi

# If there's no trunk file and no param, then exit.
if [ -z $1 ] && [ ! -e ~/.django_trunk ]; then
  echo "`basename $0` version 0.1"
  echo "Usage: `basename $0` INSTALL_DIR"
  exit 1
fi

# Get the directory either from the param or the trunk
# file.
if [ ! -z $1 ]; then
	if [ -e $TRUNK_FILE ]; then
		RM_DIR=`cat $TRUNK_FILE`
		echo "WARNING: About to remove old trunk at $RMDIR"
		read -p "Continue? (Y/n) "
		[ "$REPLY" == "n" ] || rm -rf $RM_DIR
		echo "NOTE: New trunk will be created."
		echo "NOTE: Old trunk will be left alone."
	fi

	cd $1
	BASEDIR=`pwd`
	cd -
  TRUNK=$BASEDIR/$TRUNK
	echo $TRUNK > $TRUNK_FILE
else
	TRUNK=`cat $TRUNK_FILE`
fi

# Update if trunk exists, else download trunk.
if [ -d "$TRUNK" ]; then
	echo "NOTE: $TRUNK exists.  Checking for updates"
	if [ ! -d "$TRUNK/.git" ]; then
		echo "NOTE: No '.git' file found in $TRUNK"
		echo "NOTE: Either edit the TRUNK name in this script"
		echo "NOTE: Or remove $TRUNK"
	else
		echo "NOTE: '.git' file found.  Attempting update."
		echo "NOTE: Entering $TRUNK"
		cd "$TRUNK"
		git pull
		echo "NOTE: Leaving $TRUNK"
		cd ../
		if [ ! $? ]; then
			echo "ERROR: git pull.  Exiting"
			exit 1
		fi
	fi
else
	echo "NOTE: Checking out to $TRUNK"
	git clone $SOURCE "$TRUNK"

	if [ ! $? ]; then
		echo "ERROR: Some git error occured. Exiting..."
		exit 1
	fi
fi

# Install environment!  Skip if it exists.
if [ -d $ENV ]; then
	echo "NOTE: $ENV dir exists.  Skipping virtualenv setup."
	echo "NOTE: If this isn't correct, simply remove the"
	echo "NOTE:   directory at $ENV"
else
	# Set up a virtual ENV that is in the home folder.
	virtualenv $ENV

  # Exit if there was a problem setting up the env.
	if [ ! $? ]; then
		echo "ERROR: virtual env.  Exiting..."
		exit 1
	fi
fi

echo
read -p "Install/Update Django? (y/n) "
[ "$REPLY" == "n" ] || $ENV/bin/pip install -e "$TRUNK"
echo
echo "NOTE: If you want to run python with the virtual env"
echo "NOTE: Run '~/PYENV/bin/python'"
echo "NOTE: Django has been set up to do this by default."
